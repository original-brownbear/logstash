@startuml
== Bootstrap Network from Clean State ==
activate ES
activate LS1
LS1 -> ES: Register
activate LS2
LS2 -> ES: Register
activate LS3
LS3 -> ES: Register
LS1 -> ES: Learn about other Nodes
LS2 -> ES: Learn about other Nodes
LS3 -> ES: Learn about other Nodes
group Background on all Nodes\n-Poll to Have List of Nodes\n-Ensure Nodes are Published to Node List
loop until Node Shutdown
LS1 <- ES: Download Partition Locks
LS2 <- ES: Download Partition Locks
LS3 <- ES: Download Partition Locks
end
end
== Leader Election ==
group Background on all Nodes
loop until Node Leader Acquires Leader Lock
    LS1 <-> ES: Try Lock Leader Document
    LS2 <-> ES: Try Lock Leader Document
    LS3 <-> ES: Try Lock Leader Document
end
LS1 <-> ES: Lock Leader Document Successfully
end
== LS1 Wins Election and Becomes Leader ==
LS1 -> ES: Download Configuration
LS1 -> ES: Serialize and Submit Partitioned\nTask Closures
== Steady State Execution ==
group Background on Leader (LS1)
loop until Node Shutdown
LS1 -> ES: Enqueue new tasks
LS1 -> ES: Try Cleanup Node List (Remove Nodes without any Locked Partitions)
end
end
loop until Node Shutdown
LS1 <-> ES: Lock Task Partition
LS1 <- ES: Download Task Closures Assigned Partitions \n
LS2 <-> ES: Lock Task Partition
LS2 <- ES: Download Task Closures Assigned Partitions
LS3 <-> ES: Lock Task Partition
LS3 <- ES: Download Task Closures Assigned Partitions
LS1 -> ES: Extend Task Lock + Status Updates
LS2 -> ES: Extend Task Lock + Status Updates
LS3 -> ES: Extend Task Lock + Status Updates
end
== LS1 Failure ==
deactivate LS1
group Background on all Nodes
loop until Node Leader Acquires Leader Lock
    LS2 <-> ES: Try Lock Leader Document
    LS3 <-> ES: Try Lock Leader Document
end
end
LS2 <-> ES: Lock Leader Document Successfully
== LS2 Wins Election and Becomes Leader ==
group Background on Leader (LS2)
loop until Node Shutdown
LS1 -> ES: Try Cleanup Node List (Drop LS1 from Node List once LS1's Partition )
LS2 -> ES: Enqueue new tasks (now fewer Partitions since Node List Shrank)
end
end
group Background on all Nodes
loop until Node Shutdown \n(eventually LS2 and/or LS3 acquire LS1s \nunlocked(timeout) partitions)
LS2 <- ES: Download Partition Locks
LS3 <- ES: Download Partition Locks
end
end
loop until Node Shutdown
LS2 <-> ES: Lock Task Partition
LS2 <- ES: Download Task Closures Assigned Partitions
LS3 <-> ES: Lock Task Partition
LS3 <- ES: Download Task Closures Assigned Partitions
LS2 -> ES: Extend Task Lock + Status Updates
LS3 -> ES: Extend Task Lock + Status Updates
end
== LS1 Joins Cluster ==
activate LS1
group Background on all Nodes
loop until Node Shutdown
LS1 <- ES: Download Partition Locks
LS2 <- ES: Download Partition Locks
LS3 <- ES: Download Partition Locks
end
end
group Background on Leader (LS2)
loop until Node Shutdown
LS2 -> ES: Enqueue new tasks (Now more Partitions because new Node Appeared in Node List)
LS1 -> ES: Try Cleanup Node List (None to Remove)
end
end

== Steady State Execution ==
@enduml
